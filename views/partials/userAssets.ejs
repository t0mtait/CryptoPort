<div class="relative overflow-x-auto shadow-md sm:rounded-lg">
    <p class="text-4xl m-2 text-white bg-gray-800 rounded-lg p-5 text-center">Wallet</p>
    <table class="w-full text-sm text-left rtl:text-right text-white">
        <thead class="text-xs text-white uppercase bg-gray-700">
            <tr>
                <th scope="col" class="px-6 py-3">Name</th>
                <th scope="col" class="px-6 py-3">Price</th>
                <th scope="col" class="px-6 py-3">24h</th>
                <th scope="col" class="px-6 py-3">Holdings</th>
                <th scope="col" class="px-6 py-3">Value</th>
                <th scope="col" class="px-6 py-3">Action</th>
            </tr>
        </thead>
        <tbody id="assetTableBody"></tbody>
    </table>
</div>

<script>
    async function fetchUserAssets() {
        console.log('Fetching user assets...');
        try {
            const response = await fetch('/userAssets', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json'
                },
                credentials: 'include'
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }

            const data = await response.json();
            console.log('Response data:', data);

            // Assuming data.userAssets is an object with an Items array
            const assets = data.userAssets || {};
            console.log('Assets:', assets);

            
            displayUserAssets(assets);
            
        } catch (error) {
            console.error('Error fetching user assets:', error);
        }
    }

    function displayUserAssets(data) {
    console.log('displaying user assets');
    const assetHistoryBody = document.getElementById('assetTableBody');
    assetHistoryBody.innerHTML = '';

    data.forEach((item, index) => { 
    const row = document.createElement('tr');
    row.classList.add(
        'border-b',
        'dark:border-gray-700',
        index % 2 === 0 ? 'bg-gray-800' : 'bg-gray-700'
    );

    let formattedPrice;
    let formattedChange;
    let formattedHoldings;
    formattedHoldings = parseFloat(item.quantity).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    formattedChange = parseFloat(item.dailyChange).toFixed(2) + '%';
    
    formattedValue = parseFloat(item.value).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '$';
    if (item.price >= 1.00) {
        formattedPrice = parseFloat(item.price).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ",") + '$';
    } else if (item.price >= 0.01) {
        formattedPrice = parseFloat(item.price).toFixed(4) + '$';
    } else {
        formattedPrice = parseFloat(item.price).toFixed(6) + '$';
    }
    const changeClass = item.dailyChange >= 0 ? 'text-green-500' : 'text-red-500';

    row.innerHTML = `
        <td class="px-6 py-3">${item.asset}</td>
        <td class="px-6 py-3">${formattedPrice}</td>
        <td id = "change" class="px-6 py-3 ${changeClass}">${formattedChange}</td>
        <td class="px-6 py-3">${item.quantity}</td>
        <td class="px-6 py-3">${formattedValue}</td>
        <td class="px-6 py-3"><button type="button" class="focus:outline-none text-white bg-red-700 hover:bg-red-800 focus:ring-4 focus:ring-red-300 font-medium rounded-lg text-sm px-5 py-2 m-1 dark:bg-red-600 dark:hover:bg-red-700 dark:focus:ring-red-900">Sell</button></td>
    `;
    assetTableBody.appendChild(row);
});

    } 
    window.addEventListener('DOMContentLoaded', fetchUserAssets);
</script>
